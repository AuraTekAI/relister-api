# Set the number of worker processes to handle requests.
# In this case, it's set to 1 since the default configuration is for a small or single-core system.
worker_processes 1;

# Events block to define the settings related to connection processing.
events {
    # Maximum number of simultaneous connections that each worker process can handle.
    worker_connections 1024;
}

# The HTTP block contains settings for handling HTTP traffic and configuring the server.
http {
    # Include MIME types for proper content-type headers based on file extensions.
    include       mime.types;

    # Set the default MIME type for files that do not have an explicitly specified type.
    default_type  application/octet-stream;

    # Log settings:
    # Access log records all requests made to the server.
    access_log  /var/log/nginx/access.log;

    # Error log records errors encountered by the server.
    error_log   /var/log/nginx/error.log;

    # Enable sendfile, which optimizes serving static files by avoiding the overhead of copying data between kernel and user space.
    sendfile        on;

    # Optimize the server for large file transfers by disabling the Nagle algorithm.
    # This improves performance by sending out data in large chunks rather than small pieces.
    tcp_nopush      on;

    # Disable Nagle's algorithm for keeping TCP packets smaller and faster.
    tcp_nodelay     on;

    # Keepalive timeout defines the maximum time (in seconds) that a connection can stay open.
    keepalive_timeout 65;

    # Enable gzip compression to reduce the size of HTTP responses and improve load times.
    gzip  on;

    # Define an upstream block for load balancing.
    # In this case, it forwards requests to the Django application running on the 'web' container at port 8000.
    upstream app_server {
        server web:8000;
    }

    # Server block defines the configuration for handling requests for a specific domain or IP address.
    server {
        # Listen on port 80, the default HTTP port.
        listen       80;

        # Define the server name, which is used to handle requests for this domain.
        server_name  localhost;

        # Location block for serving static files such as images, CSS, and JavaScript.
        # Files requested under the /static/ URL are served from the /staticfiles/ directory on the server.
        location /static/ {
            alias /staticfiles/;
        }

        # Location block to proxy requests to the Django application server.
        # Requests not matching /static/ are forwarded to the application server running at http://web:8000.
        location / {
            proxy_pass http://web:8000;

            # Set the Host header to the original host requested by the client.
            proxy_set_header Host $host;

            # Set the X-Real-IP header to the clientâ€™s IP address.
            proxy_set_header X-Real-IP $remote_addr;

            # Set the X-Forwarded-For header to preserve the original client IP when the request is forwarded.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Set the X-Forwarded-Proto header to preserve the original protocol (http or https).
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
